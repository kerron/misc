if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'ianks/vim-tsx'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'sheerun/vim-polyglot'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'leafgarland/typescript-vim' " Typescript syntax highlighting and support
Plug 'unblevable/quick-scope' " Highlight good anchors for `FftT` movement.
Plug 'Chiel92/vim-autoformat' " Run autoformatters in a consistent way.
Plug 'plasticboy/vim-markdown' " Markdown syntax highlighting.
Plug 'vim-scripts/txt.vim' " Generic syntax highlighting for text files
Plug 'natebosch/vim-lsc' " dart language support for vim
Plug 'natebosch/vim-lsc-dart'
Plug 'dart-lang/dart-vim-plugin'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/matchit.zip'
Plug 'tpope/vim-repeat' " Allow repeating plugin commands
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag' " html closing tags
Plug 'Quramy/tsuquyomi'
Plug 'ayu-theme/ayu-vim'
Plug 'joshdick/onedark.vim'
Plug 'sainnhe/sonokai'
call plug#end()

set spelllang=en
set spellfile=~/.vim/spell/en.utf-8.add

augroup filetype javascript syntax=javascript

set autoread                   " Auto reload changed files.
set backspace=2                " Backspace for sane people.
set backupdir=~/.vim/backups/  " Backups.
set cc=81,82                   " Column markers.
set cursorline                 " Show current line in buffer.
set swapfile
set dir=~/.vim/swap/          " Swap files.
set expandtab                  " Tabs as spaces.
set foldlevelstart=100         " Start unfolded
set hidden
set history=5000               " Command history.
set hlsearch                   " Highlight previous search results
set incsearch                  " Do incremental searching
set laststatus=2               " Always display the last status
set mouse=a                    " Mouse support.
set nohidden                   " Explicitly disallow hidden buffers.
set nonu                       " Turn off line number - necessary for relative line number
set number                     " Set line numbers
set shiftwidth=2               " How many spaces << >> modify.
set showmatch                  " Show matching braces / brackets
set showmode                   " Show the mode you're currently in
set softtabstop=2              " Make tabs act like spaces for editing ops
set t_Co=256                   " 256 colours terminal
set textwidth=0                " Width in columns to autobreak at (default)
set timeout                    " For YCM's recompilation.
set title                      " Let vim change my tab/window title
set timeoutlen=1000            " Chord timeouts
set ttimeoutlen=0              " Chord timeouts
set ttyfast                    " Fast TTY connection (local)
set undodir=~/.vim/undo    " Where to save undo histories
set undofile                   " Save undo's after file closes
set undolevels=1000            " How many undos
set undoreload=10000           " Number of lines to save.
set wildchar=<Tab>             " Get wild comps with Tab.
set wildmenu                   " Autocomp menu.
set wildmode=list:longest,full " Shell like filename autocomp.
set scrolloff=16
set showmatch                  " Show matching parenthesis
set matchtime=3                " time elapsed until for showing paren matches
set encoding=utf-8
set ignorecase                 "case insensitive when search
set smartcase                  "which will automatically switch to a case-sensitive search
set virtualedit=block

"" Things to ignore in filename autocomp.
set wildignore+=*.a,*.o,*.pch,*.bin,*.toc
set wildignore+=*.pyc,*.gz,*.bz2,*.7z,*.zip
set wildignore+=*.pdf,*.png,*.pdf,*.mkv,*.mp3,*.mp4
set wildignore+=*~,*.swp,.git
set completeopt-=preview " disable preview window

" vim vulnerability
set nomodeline
set re=1 " Yet Another TypeScript Syntax 


let g:closetag_filetypes = 'html,xhtml,phtml,tsx'
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.tsx'

let g:yats_host_keyword = 1 " Yet Another TypeScript Syntax

" Dart
let g:lsc_server_commands = {'dart': 'dart_language_server'}
let dart_style_guide = 2
let dart_format_on_save = 1

" Prettier
let g:prettier#autoformat = 0
let g:prettier#config#single_quote = 'false'
let g:prettier#config#print_width = 80 " max line length that prettier will wrap on
let g:prettier#config#tab_width = 2 " number of spaces per indentation level
let g:prettier#config#use_tabs = 'false' " use tabs over spaces
let g:prettier#config#semi = 'true' " print semicolons
let g:prettier#config#single_quote = 'false'
let g:prettier#config#bracket_spacing = 'true' " print spaces between brackets
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#parser = 'none' " flow|babylon|typescript|css|less|scss|json|graphql|markdown
let g:prettier#config#config_precedence = 'prefer-file'
let g:prettier#config#prose_wrap = 'preserve'  " always|never|preserve
let g:prettier#exec_cmd_async = 1 " The command :Prettier by default is synchronous but can also be forced async
let g:prettier#quickfix_auto_focus = 0 " By default we auto focus on the quickfix when there are errors but can also be disabled
" tsuquyomi|Typsecript
let g:tsuquyomi_shortest_import_path = 1
let g:syntastic_typescript_checkers = ['tslint']

" nerdcommenter, add space before a new comment
let NERDSpaceDelims=1
let NERDTreeShowHidden=1


" NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.swp$', '\.swo$', '__pycache__', '\.egg-info$']
let g:NERDTreeGitStatusIndicatorMapCustom = {"Modified": "m", "Staged": "+", "Deleted": "x", "Dirty": "â¬¤"}

autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

autocmd BufRead,BufNewFile *.md setlocal spell

augroup CustomAU
  autocmd!

  au FileType python
    \ set shiftwidth=4
    \| set softtabstop=4
    \| set textwidth=79
    \| au! BufWritePre <buffer> :silent Autoformat
augroup END

augroup SyntaxSettings
    autocmd!
    autocmd BufNewFile,BufRead *.tsx set filetype=typescript
augroup END

let g:solarized_termcolors=256

" if has('gui_running')
    " set background=light
" else
    " set background=dark
" endif

if system('uname -s') == "Darwin\n"
  set clipboard=unnamed "OSX
else
  set clipboard=unnamedplus "Linux
endif

nmap <C-n> :NERDTreeToggle<CR>

xnoremap p pgvy

nnoremap <leader><space> :nohlsearch<cr>

" Tsuquyomi import
nnoremap <leader>it :TsuImport <cr>

filetype indent on

try
source ~/.vim_runtime/my_configs.vim
catch
endtry


if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif

let g:ycm_semantic_triggers['typescript'] = ['.']
let g:airline_theme = 'sonokai'

syntax enable
syntax on

set termguicolors
let ayucolor="mirage"   " for dark version of theme
colorscheme onedark
